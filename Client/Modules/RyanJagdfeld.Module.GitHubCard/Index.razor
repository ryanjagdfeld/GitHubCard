@using RyanJagdfeld.Module.GitHubCard.Services
@using RyanJagdfeld.Module.GitHubCard.Models

@namespace RyanJagdfeld.Module.GitHubCard
@inherits ModuleBase
@inject IGitHubCardService GitHubCardService
@inject GitHubService GitHubService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
@inject ISettingService SettingService

@if (_GitHubCards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (PageState.EditMode)
    {
        <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add GitHubCard" ResourceKey="Add" />
    }
    @if (_GitHubCards.Count != 0)
    {
        <Pager Items="@_GitHubCards" Format="Grid" ColumnClass="@_columnClasses">
            <Row>
                @OutputTemplate(context)
                <div class="m-auto">
                    @if (PageState.EditMode)
                    {
                        <ActionLink Action="Edit" Parameters="@($"id=" + context.GitHubCardId.ToString())" ResourceKey="Edit" Security="SecurityAccessLevel.Edit" />
                        <ActionDialog Header="Delete GitHubCard" Message="Are You Sure You Wish To Delete This GitHubCard?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" ResourceKey="Delete" Id="@context.GitHubCardId.ToString()" />
                    }
                </div>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["Message.DisplayNone"]</p>
    }
}
 
@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<GitHubCard> _GitHubCards;
    string _columnClasses;
    string _userTemplate;
    string _repoTemplate;
    string _accessToken;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _GitHubCards = await GitHubCardService.GetGitHubCardsAsync(ModuleState.ModuleId);
            _columnClasses = SettingService.GetSetting(ModuleState.Settings, "ColumnClasses", "col-xl-4 col-lg-6 col-12");
            _userTemplate = SettingService.GetSetting(ModuleState.Settings, "UserTemplate", TemplateHelper.DefaultUserTemplate());
            _repoTemplate = SettingService.GetSetting(ModuleState.Settings, "RepoTemplate", TemplateHelper.DefaultRepoTemplate());
            _accessToken = SettingService.GetSetting(ModuleState.Settings, "AccessToken", string.Empty);

            foreach (var gitHubCard in _GitHubCards)
            {
                if (!string.IsNullOrEmpty(gitHubCard.Repo))
                {
                    var gitHubRepo = await GitHubService.GetGitHubRepoAsync(gitHubCard.Username, gitHubCard.Repo, _accessToken);
                    if (gitHubRepo != null)
                    {
                        gitHubCard.GitHubRepo = gitHubRepo;
                    }
                }

                var gitHubUser = await GitHubService.GetGitHubUserAsync(gitHubCard.Username, _accessToken);
                if (gitHubUser != null)
                {
                    gitHubCard.GitHubUser = gitHubUser;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading GitHubCard {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Delete(GitHubCard gitHubCard)
    {
        try
        {
            await GitHubCardService.DeleteGitHubCardAsync(gitHubCard.GitHubCardId, ModuleState.ModuleId);
            await logger.LogInformation("GitHubCard Deleted {GitHubCard}", gitHubCard);
            _GitHubCards = await GitHubCardService.GetGitHubCardsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting GitHubCard {GitHubCard} {Error}", gitHubCard, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }

    private string FullEntry(GitHubCard gitHubCard)
    {
        return gitHubCard.Repo != null ? $"{gitHubCard.Username}/{gitHubCard.Repo}" : gitHubCard.Username;
    }

    private MarkupString OutputTemplate(GitHubCard gitHubCard)
    {
        if (gitHubCard.GitHubRepo != null)
        {
            return new MarkupString(TemplateHelper.TokenizeTemplate(_repoTemplate, gitHubCard.GitHubRepo));
        }

        if (gitHubCard.GitHubUser != null)
        {
            return new MarkupString(TemplateHelper.TokenizeTemplate(_userTemplate, gitHubCard.GitHubUser));
        }

        return new MarkupString(Localizer.GetString("NotFound"));
    }
}